alphabet = Codon(letter=DNA)

#----------------------------------------------------------------------------------------
#                                            Input data
#----------------------------------------------------------------------------------------

# The sequence file to use (sequences must be aligned!)
input.sequence.file=$(INPUTFILE)

# The alignment format:
input.sequence.format=$(FORMAT)

#Sites to use:
# all, nogap or complete (=only resolved chars)
input.sequence.sites_to_use = all

# Specify a maximum amount of gaps: may be an absolute number or a percentage.
input.sequence.max_gap_allowed = 50%
input.sequence.max_unresolved_allowed = 100%

# ----------------------------------------------------------------------------------------
#                                     Input tree file
# ----------------------------------------------------------------------------------------

input.tree.file = $(TREEFILE)
input.tree.format = Newick


# ----------------------------------------------------------------------------------------
#                                     Model specification
# ----------------------------------------------------------------------------------------

## mieux
nonhomogeneous = general
nonhomogeneous.number_of_models = 1

model1 = $(MODEL)
model1.nodes_id=0:$(NODES)

nonhomogeneous.root_freq=F3X4(initFreqs=observed)

# ----------------------------------------------------------------------------------------
#                                     Likelihood computation
# ----------------------------------------------------------------------------------------



# Likelihood recursion option:
# - simple: derivatives takes more time to compute, but likelihood computation is faster.
#   For big data sets, it can save a lot of memory usage too, particularly when the data are compressed.
# - double: Uses more memory and need more time to compute likelihood, due to the double recursion.
#   Analytical derivatives are however faster to compute.

likelihood.recursion = simple

# Site compression for the simple recursion:
# - simple: identical sites are not computed twice
# - recursive: look for site patterns to save computation time during optimization, but
#   requires extra time for building the patterns.
#   This is usually the best option, particularly for nucleotide data sets.

likelihood.recursion_simple.compression = simple

# ----------------------------------------------------------------------------------------
#                                     Optimization
# ----------------------------------------------------------------------------------------

# Should we reestimate likelihood parameters? Tree topology will not be optimized.
# (recommanded)
# Method to use for optimizing numerical parameters:
# - None, no optimization performed
# - DB derivatives for branch lengths + Brent for other parameters
# - FullD derivatives for all parameters, using numerical derivatives for non-branch lengths parameters.
optimization = FullD(derivatives=Newton)

# Parameters to ignore (for instance equilibrium frequencies)
optimization.ignore_parameters = $(IGNORE)

# Maximum number of likelihood evaluations:
# went from 10000 to 100 to speed up optimization
optimization.max_number_f_eval = 100

# Precision to reach:
# went from 0.000001 to 0.01 to speed up optimization
optimization.tolerance = 0.01

#----------------------------------------------------------------------------------------
#                                Output
#----------------------------------------------------------------------------------------


# Should we write the resulting tree? none or file name.
output.tree.file = $(OUTTREE)
output.tree.format = Newick

# Write numerical parameter estimated values:
output.estimates = $(OUTPARAMS)

# Write information about optimization:
optimization.backup.file = $(BACKUP)

